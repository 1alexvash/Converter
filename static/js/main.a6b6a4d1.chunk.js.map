{"version":3,"sources":["Data.js","App.js","serviceWorker.js","index.js"],"names":["Data","Distances","name","value","Weights","Time","App","_useState","useState","tab","Object","keys","unit1","unit2","input","output","_useState2","slicedToArray","state","setState","updateState","val1","find","measure","val2","objectSpread","useEffect","react_default","a","createElement","className","map","key","onClick","e","target","innerHTML","src","alt","type","onChange","disabled","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAAeA,SAAA,CACbC,UAAW,CACT,CAAEC,KAAM,YAAaC,MAAO,KAC5B,CAAED,KAAM,QAASC,MAAO,GACxB,CAAED,KAAM,aAAcC,MAAO,KAC7B,CAAED,KAAM,aAAcC,MAAO,MAC7B,CAAED,KAAM,OAAQC,MAAO,MACvB,CAAED,KAAM,OAAQC,MAAO,IACvB,CAAED,KAAM,OAAQC,MAAO,IACvB,CAAED,KAAM,OAAQC,MAAO,OAEzBC,QAAS,CACP,CAAEF,KAAM,WAAYC,MAAO,GAC3B,CAAED,KAAM,OAAQC,MAAO,MACvB,CAAED,KAAM,QAASC,MAAO,KACxB,CAAED,KAAM,YAAaC,MAAO,MAC5B,CAAED,KAAM,QAASC,MAAO,MACxB,CAAED,KAAM,QAASC,MAAO,KACxB,CAAED,KAAM,QAASC,MAAO,KAE1BE,KAAM,CACJ,CAAEH,KAAM,SAAUC,MAAO,GACzB,CAAED,KAAM,SAAUC,MAAO,IACzB,CAAED,KAAM,OAAQC,MAAO,MACvB,CAAED,KAAM,MAAOC,MAAO,OACtB,CAAED,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,QAASC,MAAO,QACxB,CAAED,KAAM,OAAQC,MAAO,WCwGZG,EA9HH,WAAM,IAAAC,EACUC,mBAAS,CACjCC,IAAKC,OAAOC,KAAKX,GAAM,GACvBY,MAAO,KACPC,MAAO,KACPC,MAAO,EACPC,OAAQ,IANMC,EAAAN,OAAAO,EAAA,EAAAP,CAAAH,EAAA,GACTW,EADSF,EAAA,GACFG,EADEH,EAAA,GAyBhB,SAASI,EAAYjB,GACnB,IAAMkB,EAEJ,IADArB,EAAKkB,EAAMT,KAAKa,KAAK,SAAAC,GAAO,OAAIA,EAAQrB,OAASgB,EAAMN,QAAOT,MAE1DqB,EAEJ,IADAxB,EAAKkB,EAAMT,KAAKa,KAAK,SAAAC,GAAO,OAAIA,EAAQrB,OAASgB,EAAML,QAAOV,MAGhEgB,EAAST,OAAAe,EAAA,EAAAf,CAAA,GACJQ,EADG,CAENJ,MAAOX,EACPY,OAASZ,EAAQkB,EAAQG,KAY7B,OAvCAE,oBAAU,WACRP,EAAST,OAAAe,EAAA,EAAAf,CAAA,GACJQ,EADG,CAENN,MAAOZ,EAAKkB,EAAMT,KAAK,GAAGP,KAC1BW,MAAOb,EAAKkB,EAAMT,KAAK,GAAGP,SAG3B,CAACgB,EAAMT,MAEViB,oBAAU,WACmB,kBAAhBR,EAAMN,OAA6C,kBAAhBM,EAAML,OAClDO,EAAYF,EAAMJ,QAGnB,CAACI,EAAMN,MAAOM,EAAML,QA0BrBc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZpB,OAAOC,KAAKX,GAAM+B,IAAI,SAAAR,GAAO,OAC5BI,EAAAC,EAAAC,cAAA,UACEG,IAAKT,EACLU,QAAS,SAAAC,GAAC,OAAIf,EAAST,OAAAe,EAAA,EAAAf,CAAA,GAAKQ,EAAN,CAAaT,IAAKyB,EAAEC,OAAOC,cACjDN,UAAWZ,EAAMT,MAAQc,EAAU,SAAW,IAE7CA,MAIPI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,eACG7B,EAAKkB,EAAMT,KAAKsB,IAAI,SAAAR,GAAO,OAC1BI,EAAAC,EAAAC,cAAA,UACEG,IAAKT,EAAQrB,KACb+B,QAAS,SAAAC,GAAC,OACRf,EAAST,OAAAe,EAAA,EAAAf,CAAA,GACJQ,EADG,CAENN,MAAOW,EAAQrB,SAGnB4B,UAAWZ,EAAMN,QAAUW,EAAQrB,KAAO,SAAW,IAEpDqB,EAAQrB,SAIfyB,EAAAC,EAAAC,cAAA,eACG7B,EAAKkB,EAAMT,KAAKsB,IAAI,SAAAR,GAAO,OAC1BI,EAAAC,EAAAC,cAAA,UACEG,IAAKT,EAAQrB,KACb+B,QAAS,SAAAC,GAAC,OACRf,EAAST,OAAAe,EAAA,EAAAf,CAAA,GACJQ,EADG,CAENL,MAAOU,EAAQrB,SAGnB4B,UAAWZ,EAAML,QAAUU,EAAQrB,KAAO,SAAW,IAEpDqB,EAAQrB,SAIfyB,EAAAC,EAAAC,cAAA,OACEQ,IAAI,WACJJ,QAAS,WAvDfd,EAAST,OAAAe,EAAA,EAAAf,CAAA,GACJQ,EADG,CAENN,MAAOM,EAAML,MACbA,MAAOK,EAAMN,UAqDT0B,IAAI,OACJR,UAAU,UAGdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAIX,EAAMN,OACVe,EAAAC,EAAAC,cAAA,SACEU,KAAK,SACLT,UAAU,QACV3B,MAAOe,EAAMJ,MACb0B,SAAU,SAAAN,GAAC,OAAId,EAAYc,EAAEC,OAAOhC,WAIxCwB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAIX,EAAML,OACVc,EAAAC,EAAAC,cAAA,SACEU,KAAK,SACLT,UAAU,SACVW,UAAQ,EACRtC,MAAOe,EAAMH,aC/GL2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6b6a4d1.chunk.js","sourcesContent":["export default {\r\n  Distances: [\r\n    { name: \"Kilometre\", value: 1000 },\r\n    { name: \"Metre\", value: 1 },\r\n    { name: \"Centimetre\", value: 0.01 },\r\n    { name: \"Millimetre\", value: 0.001 },\r\n    { name: \"Mile\", value: 1610 },\r\n    { name: \"Yard\", value: 0.9 },\r\n    { name: \"Foot\", value: 0.3 },\r\n    { name: \"Inch\", value: 0.025 }\r\n  ],\r\n  Weights: [\r\n    { name: \"Kilogram\", value: 1 },\r\n    { name: \"Gram\", value: 0.001 },\r\n    { name: \"Tonne\", value: 1000 },\r\n    { name: \"Milligram\", value: 0.000001 },\r\n    { name: \"Stone\", value: 0.157 },\r\n    { name: \"Pound\", value: 2.2 },\r\n    { name: \"Ounce\", value: 35 }\r\n  ],\r\n  Time: [\r\n    { name: \"Second\", value: 1 },\r\n    { name: \"Minute\", value: 60 },\r\n    { name: \"Hour\", value: 3600 },\r\n    { name: \"Day\", value: 86400 },\r\n    { name: \"Week\", value: 604800 },\r\n    { name: \"Month\", value: 2628000 },\r\n    { name: \"Year\", value: 31540000 }\r\n  ]\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./scss/main.css\";\n\nimport Data from \"./Data\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    tab: Object.keys(Data)[0],\n    unit1: null,\n    unit2: null,\n    input: 0,\n    output: 0\n  });\n\n  useEffect(() => {\n    setState({\n      ...state,\n      unit1: Data[state.tab][0].name,\n      unit2: Data[state.tab][1].name\n    });\n    // eslint-disable-next-line\n  }, [state.tab]);\n\n  useEffect(() => {\n    if (typeof state.unit1 === \"string\" && typeof state.unit2 === \"string\") {\n      updateState(state.input);\n    }\n    // eslint-disable-next-line\n  }, [state.unit1, state.unit2]);\n\n  function updateState(value) {\n    const val1 =\n      Data[state.tab].find(measure => measure.name === state.unit1).value *\n      1000;\n    const val2 =\n      Data[state.tab].find(measure => measure.name === state.unit2).value *\n      1000;\n\n    setState({\n      ...state,\n      input: value,\n      output: (value * val1) / val2\n    });\n  }\n\n  function swap() {\n    setState({\n      ...state,\n      unit1: state.unit2,\n      unit2: state.unit1\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Units\">\n        {Object.keys(Data).map(measure => (\n          <button\n            key={measure}\n            onClick={e => setState({ ...state, tab: e.target.innerHTML })}\n            className={state.tab === measure ? \"active\" : \"\"}\n          >\n            {measure}\n          </button>\n        ))}\n      </div>\n      <div className=\"List-of-units\">\n        <section>\n          {Data[state.tab].map(measure => (\n            <button\n              key={measure.name}\n              onClick={e =>\n                setState({\n                  ...state,\n                  unit1: measure.name\n                })\n              }\n              className={state.unit1 === measure.name ? \"active\" : \"\"}\n            >\n              {measure.name}\n            </button>\n          ))}\n        </section>\n        <section>\n          {Data[state.tab].map(measure => (\n            <button\n              key={measure.name}\n              onClick={e =>\n                setState({\n                  ...state,\n                  unit2: measure.name\n                })\n              }\n              className={state.unit2 === measure.name ? \"active\" : \"\"}\n            >\n              {measure.name}\n            </button>\n          ))}\n        </section>\n        <img\n          src=\"swap.png\"\n          onClick={() => swap()}\n          alt=\"swap\"\n          className=\"swap\"\n        />\n      </div>\n      <div className=\"Converter\">\n        <label>\n          <p>{state.unit1}</p>\n          <input\n            type=\"number\"\n            className=\"input\"\n            value={state.input}\n            onChange={e => updateState(e.target.value)}\n          />\n        </label>\n\n        <label>\n          <p>{state.unit2}</p>\n          <input\n            type=\"number\"\n            className=\"output\"\n            disabled\n            value={state.output}\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}